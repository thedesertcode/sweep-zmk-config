// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT
// Cursor moving speed

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500

// Scroll speed

#define ZMK_POINTING_DEFAULT_SCRL_VAL 30

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

// https://zmk.dev/docs/development/hardware-integration/soft-off-setup?advanced-methods=wakeup&kscan-type=dkscan

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
};

&sk {
    release-after-ms = <900>;
    quick-release;
};

/ {
    keys {
        compatible = "gpio-keys";

        soft_off_gpio_key: soft_off_gpio_key { gpios = <&gpio1 6 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>; };
    };

    wakeup_scan: wakeup_scan {
        compatible = "zmk,kscan-gpio-direct";
        input-keys = <&soft_off_gpio_key>;
        wakeup-source;
    };

    side_band_behavior_triggers: side_band_behavior_triggers {
        compatible = "zmk,kscan-sideband-behaviors";
        kscan = <&wakeup_scan>;
        auto-enable;
        wakeup-source;
    };

    soft_off_wakers {
        compatible = "zmk,soft-off-wakeup-sources";
        wakeup-sources = <&wakeup_scan>;
    };
};

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        sk_hold: sk_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "SK_HOLD";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
        };

        space_nav_dance: space_nav_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "SPACE_NAV_DANCE";
            #binding-cells = <0>;
            bindings = <&space_nav_hold 2 SPACE>, <&tog 2>;

            tapping-term-ms = <250>;
        };

        sl_sym_dance: sl_sym_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "SL_SYM_DANCE";
            #binding-cells = <0>;
            bindings = <&sl 1>, <&tog 1>;

            tapping-term-ms = <250>;
        };

        space_nav_hold: space_nav_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_NAV_HOLD";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <125>;
            require-prior-idle-ms = <100>;
        };

        caps_num_hold: caps_num_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_NUM_HOLD";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <125>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
        };

        sl_hold: sl_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "SL_HOLD";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <125>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
        };

        mmv {
            acceleration-exponent = <0>;
            time-to-max-speed-ms = <500>;
            delay-ms = <0>;
        };

        msc {
            acceleration-exponent = <0>;
            time-to-max-speed-ms = <500>;
            delay-ms = <10>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <11 12>;
            timeout-ms = <40>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <12 13>;
            timeout-ms = <40>;
        };

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
            timeout-ms = <40>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <11 13>;
            timeout-ms = <40>;
        };

        combo_to_base {
            bindings = <&to 0>;
            key-positions = <10 30>;
            timeout-ms = <50>;
        };

        combo_home {
            bindings = <&kp HOME>;
            key-positions = <10 0>;
            timeout-ms = <50>;
        };

        combo_pgup {
            bindings = <&kp PAGE_UP>;
            key-positions = <1 11>;
        };

        combo_pgdn {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <12 2>;
        };

        combo_end {
            bindings = <&kp END>;
            key-positions = <13 3>;
            timeout-ms = <50>;
        };

        combo_to_sym {
            bindings = <&to 1>;
            key-positions = <11 30>;
            timeout-ms = <50>;
        };

        combo_to_nav {
            bindings = <&to 2>;
            key-positions = <12 30>;
        };

        combo_to_num {
            bindings = <&to 3>;
            key-positions = <13 30>;
            timeout-ms = <50>;
        };

        combo_to_fn {
            bindings = <&to 4>;
            key-positions = <20 30>;
            timeout-ms = <50>;
        };

        combo_to_sys {
            bindings = <&to 5>;
            key-positions = <21 30>;
            timeout-ms = <50>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <20 21>;
            timeout-ms = <50>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <21 22>;
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <22 23>;
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_en_input {
            bindings = <&kp LC(LS(N1))>;
            key-positions = <10 31>;
            timeout-ms = <50>;
        };

        combo_ru_input {
            bindings = <&kp LC(LS(N2))>;
            key-positions = <20 31>;
            timeout-ms = <50>;
        };

        combo_capsword {
            bindings = <&caps_word>;
            key-positions = <5 15>;
            timeout-ms = <50>;
        };

        combo_select_all {
            bindings = <&kp LC(A)>;
            key-positions = <20 23>;
            timeout-ms = <50>;
        };

        combo_mouse_lclk {
            bindings = <&mkp LCLK>;
            key-positions = <16 17>;
            timeout-ms = <50>;
        };

        combo_mouse_rclk {
            bindings = <&mkp RCLK>;
            key-positions = <18 19>;
            timeout-ms = <50>;
        };

        combo_mouse_mclk {
            bindings = <&mkp MCLK>;
            key-positions = <17 18>;
            timeout-ms = <50>;
        };

        combo_msc_down {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <7 17>;
            timeout-ms = <50>;
        };

        combo_msc_up {
            bindings = <&msc SCRL_UP>;
            key-positions = <8 18>;
            timeout-ms = <50>;
        };

        combo_msc_left {
            bindings = <&msc SCRL_LEFT>;
            key-positions = <6 16>;
            timeout-ms = <50>;
        };

        combo_msc_right {
            bindings = <&msc SCRL_RIGHT>;
            key-positions = <9 19>;
            timeout-ms = <50>;
        };

        combo_ru_tz {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <15 32>;
            timeout-ms = <50>;
        };

        combo_ru_j {
            bindings = <&kp SEMI>;
            key-positions = <32 17>;
            timeout-ms = <50>;
        };

        combo_ru_x {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <32 16>;
            timeout-ms = <50>;
        };

        combo_ru_e {
            bindings = <&kp APOSTROPHE>;
            key-positions = <18 32>;
            timeout-ms = <50>;
        };

        combo_ru_yo {
            bindings = <&kp GRAVE>;
            key-positions = <19 32>;
            timeout-ms = <50>;
        };

        combo_capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <15 25>;
            timeout-ms = <50>;
        };

        combo_shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <31 32>;
            timeout-ms = <50>;
        };

        combo_term_copy {
            bindings = <&kp LC(LS(C))>;
            key-positions = <21 22>;
            timeout-ms = <50>;
            layers = <2>;
        };

        combo_term_paste {
            bindings = <&kp LC(LS(V))>;
            key-positions = <22 23>;
            layers = <2>;
        };

        combo_ff_list_tabs {
            bindings = <&kp LC(LS(TAB))>;
            key-positions = <16 19>;
            timeout-ms = <50>;
        };
    };

    macros {
        app_switcher: app_switcher {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(TAB)>, <&macro_wait_time 5>, <&to 2>;

            label = "APP_SWITCHER";
        };

        new_tab_then_base: new_tab_then_base {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(T) &to 0>;
            label = "NEW_TAB_THEN_BASE";
        };

        minimize_parsec: minimize_parsec {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(LS(W))>,
                <&macro_wait_time 30>,
                <&kp LC(F10)>,
                <&macro_wait_time 30>,
                <&kp LG(DOWN)>;

            label = "MINIMIZE_PARSEC";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";
            bindings = <
&kp Q           &kp W       &kp E        &kp R             &kp T          &kp Y         &kp U              &kp I        &kp O       &kp P
&ht LEFT_WIN A  &ht LALT S  &ht LCTRL D  &ht LEFT_SHIFT F  &kp G          &kp H         &ht RIGHT_SHIFT J  &ht RCTRL K  &ht RALT L  &ht RIGHT_WIN BACKSPACE
&kp Z           &kp X       &kp C        &kp V             &kp B          &kp N         &kp M              &kp COMMA    &kp DOT     &mkp LCLK
                                         &lt 3 TAB         &lt 2 SPACE    &sl_hold 1 1  &sl_hold 4 4
            >;
        };

        sym {
            display-name = "sym";
            bindings = <
&kp EXCL  &kp AT    &kp HASH  &kp DLLR              &kp PRCNT    &kp CARET     &kp AMPS   &kp ASTRK  &kp GRAVE         &kp TILDE
&kp DQT   &kp LBKT  &kp LBRC  &kp LEFT_PARENTHESIS  &kp FSLH     &kp QUESTION  &kp MINUS  &kp COLON  &kp LESS_THAN     &kp EQUAL
&kp SQT   &kp RBKT  &kp RBRC  &kp RPAR              &kp BSLH     &kp PIPE      &kp UNDER  &kp SEMI   &kp GREATER_THAN  &kp PLUS
                              &trans                &trans       &kp ENTER     &trans
            >;
        };

        nav {
            display-name = "nav";
            bindings = <
&kp LC(Q)       &kp LC(W)     &kp LA(F4)      &kp PRINTSCREEN  &kp LG(TAB)        &minimize_parsec  &trans          &trans             &trans         &trans
&kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp INSERT         &trans            &kp LEFT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_WIN
&msc SCRL_LEFT  &msc SCRL_UP  &msc SCRL_DOWN  &msc SCRL_RIGHT  &kp LC(LS(TAB))    &trans            &trans          &trans             &trans         &trans
                                              &trans           &trans             &trans            &trans
            >;
        };

        num {
            bindings = <
&kp PLUS  &kp N7  &kp N8  &kp N9        &kp MINUS       &trans  &trans  &trans  &trans  &trans
&kp DOT   &kp N4  &kp N5  &kp NUMBER_6  &kp ASTERISK    &trans  &trans  &trans  &trans  &trans
&kp N0    &kp N1  &kp N2  &kp N3        &kp SLASH       &trans  &trans  &trans  &trans  &trans
                          &trans        &trans          &trans  &trans
            >;
        };

        fn {
            display-name = "fn";
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9  &trans    &trans      &kp C_PREV         &kp C_PLAY_PAUSE  &kp C_NEXT            &kp LG(L)
&kp F11  &kp F4  &kp F5  &kp F6  &trans    &trans      &kp LEFT_SHIFT     &kp LCTRL         &kp LEFT_ALT          &kp LEFT_WIN
&kp F10  &kp F1  &kp F2  &kp F3  &trans    &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC
                         &trans  &trans    &trans      &trans
            >;
        };

        sys {
            display-name = "sys";
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR     &trans       &trans  &trans  &trans  &trans
&out OUT_USB  &out OUT_BLE  &trans        &trans        &trans         &trans       &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans         &trans       &trans  &trans  &trans  &trans
                                          &soft_off     &bootloader    &bootloader  &trans
            >;
        };

        gaming {
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E    &kp R        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3    &kp NUMBER_4  &kp NUMBER_5
&kp LSHFT  &kp A  &kp S  &kp D    &kp F        &kp G         &kp LCTRL     &kp LEFT_SHIFT  &kp K         &mkp RCLK
&kp LCTRL  &kp Z  &kp X  &kp C    &kp V        &kp B         &kp N         &kp M           &none         &kp ENTER
                         &kp TAB  &kp SPACE    &mkp LCLK     &none
            >;

            label = "gaming";
        };

        colemak-dh {
            bindings = <
&kp Q  &kp W  &kp F  &kp P      &kp B     &kp J           &kp L    &kp U      &kp Y    &kp BSPC
&kp A  &kp R  &kp S  &kp T      &kp G     &kp M           &kp N    &kp E      &kp I    &kp O
&kp Z  &kp X  &kp C  &kp D      &kp V     &kp K           &kp H    &kp COMMA  &kp DOT  &kp ENTER
                     &kp SPACE  &trans    &kp LEFT_SHIFT  &kp TAB
            >;

            label = "colemak-dh";
        };

        hands_down {
            bindings = <
&none  &none  &none  &none  &none     &none  &none  &none  &none  &none
&none  &none  &none  &none  &none     &none  &none  &none  &none  &none
&none  &none  &none  &none  &none     &none  &none  &none  &none  &none
                     &none  &trans    &none  &none
            >;
        };
    };
};
